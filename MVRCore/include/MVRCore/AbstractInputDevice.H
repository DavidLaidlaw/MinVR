//========================================================================
// MinVR
// Platform:    Any
// API version: 1.0
//------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2013 Regents of the University of Minnesota
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//========================================================================

#ifndef ABSTRACTINPUTDEVICE_H
#define ABSTRACTINPUTDEVICE_H

#include <boost/shared_ptr.hpp>
#include "MVRCore/Event.H"

namespace MinVR {

typedef boost::shared_ptr<class AbstractInputDevice> AbstractInputDeviceRef;

/*! @brief Base class for InputDevices.
 *  Input Devices should be polled once
 *  per frame and append Events that were generated since the last
 *  call to poll to the array passed into the poll routine.
 */
class AbstractInputDevice
{
public:
  AbstractInputDevice() {}
  virtual ~AbstractInputDevice() {}

  /*! @brief Adds device events to event queue.
	*
	*  Adds any events generated by the input device to the events array.
	*
	*  @remarks This should be implemented by any derived classes.
	*/
  virtual void pollForInput(std::vector<EventRef> &events) = 0;
};

} // end namespace


#endif
